image: rust:1.47.0-buster

# Set any required environment variables here
variables:
  RUST_BACKTRACE: FULL
  GIT_SUBMODULE_STRATEGY: recursive
  CARGO_HOME: $CI_PROJECT_DIR/.cargo
  DOCKER_BUILDKIT: 1
  DOCKER_CLI_EXPERIMENTAL: enabled
  DOCKER_DRIVER: overlay2

stages:
  - version
  - build
  - image
  - release
  - deploy

version:
  stage: version
  image: registry.gitlab.com/juhani/go-semrel-gitlab:v0.19.0
  script:
    - release next-version --bump-patch > .next-version
  artifacts:
    paths:
    - .next-version
  except:
  - tags

pre-release:
  stage: build
  image: docker:stable
  services:
  - docker:dind
  script:
  - docker build .
  only:
  - branches
  except:
  - master

build-image:
  stage: image
  image: docker:stable
  services:
  - docker:dind
  script:
  - rm -f build_info
  - echo "RELEASE_URL=https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/jobs/$CI_JOB_ID/artifacts/release" > build_info
  - echo "RELEASE_DESC=\"$(uname -mo) binary\"" >> build_info
  - echo "RELEASE_SHA=$CI_COMMIT_SHA" >> build_info
  - echo "RELEASE_VERSION=$(cat .next-version)" >> build_info
  - . build_info
  - docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY
  - docker build -t $CI_REGISTRY_IMAGE:v$RELEASE_VERSION .
  - docker build -t $CI_REGISTRY_IMAGE:latest .
  - docker push $CI_REGISTRY_IMAGE:v$RELEASE_VERSION
  - docker push $CI_REGISTRY_IMAGE:latest

  artifacts:
     paths:
     - build_info
  only:
  - master

release:
  stage: release
  image: registry.gitlab.com/juhani/go-semrel-gitlab:v0.21.1
  script:
  - rm -f release_info
  - mv build_info release_info
  - . release_info

  - release -v
  - release --bump-patch changelog
  - release --bump-patch commit-and-tag CHANGELOG.md release_info
  - release --bump-patch --ci-commit-tag v$RELEASE_VERSION add-download-link -n release -u $RELEASE_URL -d "$RELEASE_DESC"
  artifacts:
    paths:
      - release_info
  only:
  - master

deploy:
  stage: deploy
  image: docker:latest
  variables:
    DOCKER_HOST: "$PROD_DOCKER_HOST"
    EXOPTICON_DB_PATH: "/video/main/db"
    EXOPTICON_VIDEO_PATH: "/video/main/video"
    EXOPTICON_POSTGRES_PASSWORD: "$PROD_PG_PASS"
    COMPOSE_PROJECT_NAME: "exprod"
  before_script:
    - . release_info
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - printf "%s" "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
    - printf "%s" "$SSH_DEPLOYMENT_KEY" > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa ~/.ssh/known_hosts
    # Configure docker
    - apk add docker-compose
    - docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY
  script:
    - . release_info
    - cd docker/
    - >
      docker-compose \
      -f docker-compose.db.yml \
      -f docker-compose.yml \
      -f docker-compose.cuda.yml \
      -e RELEASE_VERSION \
      pull
    - >
      docker-compose \
      -f docker-compose.db.yml \
      -f docker-compose.yml \
      -f docker-compose.cuda.yml \
      -e RELEASE_VERSION \
      -e EXOPTICON_DB_PATH \
      -e EXOPTICON_VIDEO_PATH \
      -e EXOPTICON_POSTGRES_PASSWORD \
      -e COMPOSE_PROJECT_NAME \
      up -d --force-recreate
  only:
  - master
